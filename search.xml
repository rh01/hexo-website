<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[爬虫实战第一节课笔记]]></title>
      <url>%2F2017%2F02%2F18%2F%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%AC%AC%E4%B8%80%E8%8A%82%E8%AF%BE%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[网络爬虫更新第一节课笔记 什么是网络爬虫 定义 网络爬虫（又称为网页蜘蛛，网络机器人，在FOAF社区之间更经常地称为网页追随者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。 由于专门用于信息检索的“机器人程序”像蜘蛛一样在网络之间爬来爬去，因此，搜索引擎的“机器人”程序就被称为“蜘蛛”程序 历史 1990年，蒙特利尔大学学生Alan Emtage发明的Archie，用于搜索分散的FTP主机上的资源。 1993年，内华达大学受启发开发了类似工具，但是开始支持网页搜索。 Martin Koster于1993年10月创建了ALIWEB，它是Archie的HTTP版本。ALIWEB不使用“机器人”程序，而是靠网站主动提交信息来建立自己的链接索引，类似于现在我们熟知的Yahoo。 Yahoo, Google, Baidu, Bing… 使用Python写爬虫的好处 上手容易！！！ 免费开源，使用不受限制。 解释执行，跨平台不受限制。 面向对象 框架和库支持丰富，有大量的历史积累。 Python开发环境搭建和简介 Python简介 官网：https://www.python.org/ 作者：Guido van Rossum 名字来源：Monty Python’s Flying Circus（和蟒蛇无关啊！） 作者为什么发明Python：平衡C和Shell 版本选择：2.7和3.5，更低版本不推荐使用。2.x和3.x的区别暂时不用关心。 Python环境搭建 Windows可去官网下载安装包：2.7.12或3.5.2 Mac 系统自带 通过homebrew和pyenv安装并维护多个Python版本，参考链接。 Linux系统自带，或参考上面链接使用pyenv安装并维护多个Python版本 使用pip安装第三方包，命令为pip install package（注：Mac下需要打开sudo，参考链接。） 新版本Mac系统可能因为SIP，需要在命令行后增加–user参数 遇到GFW可以使用国内源（推荐豆瓣），命令行为pip install package -i –trusted-host http://pypi.douban.com/simple/ HTTP简介 HTTP = HyperText Transfer Protocol URI = Uniform Resource Identifier URL = Uniform Resource Locator URI和URL的区别：URI强调的是资源，而URL强调的是资源的位置。 常用请求类型 OPTIONS: 返回服务器针对特定资源所支持的http请求方法。 HEAD: 向服务器索要与get请求相一致的响应，只不过响应体将不会被返回。 GET: 向特定资源发出请求 PUT: 向指定资源位置上传其最新内容 POST: 向指定资源提交数据进行处理请求 DELETE: 请求服务器删除指定URI所标识的资源 PATCH: 用来将局部修改应用于某一资源 HTML (Hypertext Markup Language) 推荐教程：HTML HTML不是编程语言，而是一种标记语言。即HTML使用标记标签来描述网页。 标签和元素 DOM文档模型 1234567891011121314151617&lt;标签 属性="属性的值"&gt;&lt;/标签&gt;比如：&lt;a href="www.baidu.com"&gt;&lt;a&gt;&lt;p&gt;&lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;....DOM文档模型：文本&lt;body&gt; - 段落1 &lt;p&gt;...&lt;/p&gt; - 列表 &lt;ul&gt;...&lt;/ul&gt; - 图片 &lt;img src=""&gt; &lt;/img&gt; - 文本 -段落2 - 列表 - ... XML (eXtensible Markup Language) 推荐教程：XML 树结构 12345678910ROOT - E1 - G1 - G1 -&gt; 属性/值 - E2 - E3 &lt;node attr=value&gt;...&lt;/node&gt;[ROOT][E1][G1].text[ROOT][E2][G1].text Json (JavaScript Object Notation) 推荐教程：Json 语法类似XML，但是更小、更快、更容易解析。对JavaScript特别友好。 MySQL Windows: 下载免费社区版mysql server。 客户端操作可以使用MySQLWorkbench。 Linux（以debian为例） 1.apt-get install mysql-server mysql-client 2.登陆mysql: mysql -p hostname -u username -p，然后使用use dbname指定需要操作的数据库 3.安装phpmyadmin方便在浏览器操作数据库 MySQL常用命令 show databases: 显示当前服务器上的数据库 create database dbname: 创建一个新数据库 use dbname: 使用指定的数据库 show tables: 显示当前数据库的所有表 desc tbname: 显示表结构 SQLite Windows直接去下载可执行文件即可使用，Linux下apt-get install sqlite3即可完成安装。 相比mysql更加轻便好用。 大数据情况下效率变差，适合单机小程序。 爬虫框架介绍工作流程 将种子URL放入队列 从队列中获取URL，抓取内容。 解析抓取内容，将需要进一步抓取的URL放入工作队列，存储解析后的内容 抓取策略 深度优先 广度优先 PageRank 大站优先策略 如何去重 Hash表 bloom过滤器 123456789101112131415161718192021222324252627282930313233343536373839404142news.sina.com.cn1.sina.com.cn2.sina.com.cnnews.sina.com.cn - 专题1 - news11 - news12 - news13 - 专题2 - news21 - news22 - news23DFS（深度）:working专题1111213working专题2212223BFS（广度）：working专题1专题2111213212223PageRank:给网页打值 Robots规范与原则Robots规范 Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。Robots协议的本质是网站和搜索引擎爬虫的沟通方式，用来指导搜索引擎更好地抓取网站内容，而不是作为搜索引擎之间互相限制和不正当竞争的工具。 详情：http://baike.so.com/doc/4854891-5072162.html 爬虫质量标准 分布式 可伸缩性 性能和有效性 质量 新鲜性 更新 可扩展性 扯得远点 Map/Reduce背后 例子1目标：获取某一个省的邮编区号目标网站： www.ip138.com/post/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import requestsimport xml.etree.ElementTree as ETfrom xml.parsers.expat import ParserCreateclass DefaultSaxHandler(object): def __init__(self, provinces): self.provinces = provinces # 处理标签开始 def start_element(self, name, attrs): if name != 'map': name = attrs['title'] number = attrs['href'] self.provinces.append((name, number)) # 处理标签结束 def end_element(self, name): pass # 文本处理 def char_data(self, text): pass def get_province_entry(url): # 获取文本，并用gb2312解码 content = requests.get(url).content.decode('gb2312') # 确定要查找字符串的开始结束位置，并用切片获取内容。 start = content.find('&lt;map name=\"map_86\" id=\"map_86\"&gt;') end = content.find('&lt;/map&gt;') content = content[start:end + len('&lt;/map&gt;')].strip().encode('utf8') provinces = [] # 生成Sax处理器 handler = DefaultSaxHandler(provinces) # 初始化分析器 parser = ParserCreate() parser.StartElementHandler = handler.start_element parser.EndElementHandler = handler.end_element parser.CharacterDataHandler = handler.char_data # 解析数据 parser.Parse(content) # 结果字典为每一页的入口代码 return provincesprovinces = get_province_entry('http://www.ip138.com/post')for i in provinces: print(i[0],i[1]) 新疆 /83/ 西藏 /85/ 青海 /81/ 甘肃 /73/ 四川 /61/ 云南 /65/ 宁夏 /75/ 内蒙古 /01/ 黑龙江 /15/ 吉林 /13/ 辽宁 /11/ 河北 /50/ 北京 /10/ 天津 /30/ 陕西 /71/ 山西 /03/ 山东 /25/ 河南 /45/ 重庆 /40/ 湖北 /43/ 安徽 /23/ 江苏 /21/ 上海 /20/ 贵州 /55/ 广西 /53/ 湖南 /41/ 江西 /33/ 浙江 /31/ 福建 /35/ 广东 /51/ 海南 /57/ 台湾 /taiwang/ 澳门 /aomen/ 香港 /xianggang/ 例子2抓取股票信息 1234567891011121314151617181920212223242526272829303132333435import requestsimport threadingdef display_info(code): url = 'http://hq.sinajs.cn/list=' + code response = requests.get(url).text print(response) def single_thread(codes): for code in codes: code = code.strip() display_info(code)def multi_thread(tasks): # 用列表推导生成线程，注意codes后面的‘，’! threads = [threading.Thread(target = single_thread, args = (codes,)) for codes in tasks] # 启动线程 for t in threads: t.start() # 等待线程结束 for t in threads: t.join()# 注意main函数的形式if __name__ == '__main__': codes = ['sh600001', 'sh600002', 'sh600003', 'sh600004', 'sh600005', 'sh600006'] # 计算每个线程要做多少工作 thread_len = int(len(codes) / 4) t1 = codes[0: thread_len] t2 = codes[thread_len: thread_len * 2] t3 = codes[thread_len * 2: thread_len * 3] t4 = codes[thread_len * 3:] # 多线程启动 multi_thread([t1, t2, t3, t4]) var hq_str_sh600001=&quot;&quot;; var hq_str_sh600002=&quot;&quot;; var hq_str_sh600003=&quot;&quot;; var hq_str_sh600004=&quot;白云机场,14.480,14.480,14.330,14.510,14.320,14.320,14.330,4926788,70978480.000,35700,14.320,30700,14.310,60300,14.300,52400,14.290,20400,14.280,4200,14.330,20300,14.340,14100,14.350,2500,14.360,5702,14.370,2017-02-17,15:00:00,00&quot;; var hq_str_sh600005=&quot;武钢股份,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0,0.000,0,0.000,0,0.000,0,0.000,0,0.000,0,0.000,0,0.000,0,0.000,0,0.000,0,0.000,0,0.000,2017-02-17,09:14:18,00&quot;; var hq_str_sh600006=&quot;东风汽车,7.000,7.020,7.160,7.350,6.940,7.150,7.160,34238293,243779395.000,41100,7.150,160200,7.140,81600,7.130,289391,7.120,81200,7.110,150971,7.160,235900,7.170,235000,7.180,228890,7.190,403400,7.200,2017-02-17,15:00:00,00&quot;;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[申请Coursera助学金-干货]]></title>
      <url>%2F2017%2F02%2F16%2F%E7%94%B3%E8%AF%B7Coursera%E5%8A%A9%E5%AD%A6%E9%87%91-%E5%B9%B2%E8%B4%A7%2F</url>
      <content type="text"><![CDATA[对于没有钱的学生党来说，Coursera的课程太贵，没有办法，只能通过申请助学金来实现正规的学习，过去Coursera还支持旁听，现在没有了，无奈的我们只能通过Apply Finitial Aid来学习了，想想都痛苦 申请助学金在哪申请？？恐怕很多童鞋们都找不到如何申请助学金的链接，不过没关系，哥哥告诉你，哈哈，:) 具体操作步骤：1. 打开你想申请的课程网站比如，莱斯大学著名的IIPP课程（已完成），课程网站为An Introduction to Interactive Programming in Python(Part 1) IIPP课程已经更新了他原来的界面，我个人感觉这种界面还是很不错的.这门课是隶属莱斯大学计算机基础的专项课程的第一门课，But这只是Part1，尼玛，还有Part2吗，恭喜你，答对了，由于照顾到部分同学的学习的压力，所以将IIPP划分为两门课来上，另外Part1和Part2的差距对我来说，难度跨越有点大，所以希望大家继续努力，。。。。跑偏主题了，快回来。。。 点击右边的注册按钮，同学们会发现下面的这种情况 OK，你们会看到有旁听选项，我个人认为仅旁听激不起你学习的的动力，另外这门课成绩必须在规定的时间（1 week）完成，如果过期，那么不好意思，请移步下一期课程，但是再看看前面的两个选项，尼玛，这也太贵了吧，59刀。。。 2. 寻找申请助学金链接 你看看这弄得也忒隐蔽了吧，还好我眼睛比较尖锐，哈哈，Andrew Ng是不是故意的,呵呵~ 3. 言归正传,开始申请吧点击链接,我们会转到申请助学金的页面, 不错,就是它,如果你们看到这了,会产生两个疑问,中文写还是英文?? 当然英文了,对于英文弱的要死要死的我们,肿么办?? 4. 干货来了要注意的是： 首先按照自个儿的经济情况书写，国家不要填错！ 下面是一超链接，大家都懂得！干货，别说我没告诉你！ 5. 终于完工了具体的页面如下：]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[RStudio在使用Github时出现的问题的解决方案]]></title>
      <url>%2F2017%2F02%2F16%2FRStudio%E5%9C%A8%E4%BD%BF%E7%94%A8Github%E6%97%B6%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
      <content type="text"><![CDATA[在使用Github时，往往出现这种情况，我在使用Github client时，比如 Android Studio，Github Desktop，Rstudio，PyCharm 等等时，我为了工程项目更好的同步到我的github 上，往往使用客户端的 Git Push 比较迅速，但是在配置方面，很麻烦，所以在我配置的时候出现了这样一则错误， unable to read askpass response from… ,结合网上资源，将解决方案放出！ 当我尝试着从RStudio IDE中push到github的时候，遇到了以下的错误信息. 123error: unable to read askpass response from &apos;rpostback-askpass&apos;fatal: could not read Username for &apos;https://github.com&apos;: No such device or address RStduio也有我的源 1https://github.com/rh01/calendar.git RStudio 不允许我改变版本控制系统的源（主要在这里灰色显示），如下图所示： 我尝试了很多方法去解决该问题，在 stackoverflow 收到启发，根据我的情况，作出了以下的方案解决上述问题 我根据之前的经验，看到我之前已经正常工作的RProject的configuration 于是我在本地计算机中删除了本地clone的repo.然后重新克隆github中源 然后我在RStudio中 click New Project -&gt; Existing Directory OKay,It’s Works.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[浅谈latex]]></title>
      <url>%2F2017%2F02%2F16%2F%E6%B5%85%E8%B0%88latex%2F</url>
      <content type="text"><![CDATA[LaTeX是在克努特老先生（注：他的著作有TeX系统，计算机程序设计艺术）发明出来TeX系统的基础之上完善的。刚开始主要适用于文章和数学公式的排版。他是我最喜欢的排版技术之一。TeX系统是在1982年发布的。目前的TeX系统的版本不断修正，们目前的版本号不断接近 $\pi$. LaTeXLaTeX是一个宏包，目的是使作者能够利用一个预先定义好的专业页面设置，从而得以高质量的排版个打印他们的作品。 LaTeX基础作者图书设计者和排版者出版的第一步是将他们的手稿交给出版公司，然后图书设计者来决定这个本书的版面形式（包括栏宽、字体、标题前后的间距······）。图书设计者会把他的排版说明写进手稿里，一起交给排版者，排版者左后根据这些说明完成这本书的排版工作。 一个图书设计者要试图理解作者写作时意图他要根据手稿的内容和他自己的职业知识决定章节标题，文献引用、例子、公式等等。 在LaTeX环境下，LaTeX代替了图书设计者的角色，TEX则是他的排版者，但是LaTeX“仅仅”是一个计算机程序，他需要更多的指导。作者必须在他的作品中提供附加信息，用于描述作品的逻辑结构。这些信息是通过“LaTeX命令”写入文章中的。 在使用LaTeX的时候，一般来说是不能在输入文章的同时看到组中的效果的（对比~WYSIWYG）。但是在屏幕上预览最终的输出效果的，因此在真正打印文档之前是可以对其进行修改的。 版面设计如果排印好的文档从艺术角度看来不错，就说明设计是成功的。 优势与不足MSWord和LaTeX的对比 优势 提供专业级的排版设计，使你的文档看起来如同印刷好的一样。 可以更方便的盘版数学公式。 用户仅仅需要掌握少数容易理解的，用来说明文档之逻辑结构的命令，无需对实际的页面设计做胡乱的修补。 可以很容易的神农谷成脚注、索引、目录和参考文献等复杂的结构。 有大量免费地可添加宏集，协助你完成许多基本的LaTeX为直接支持的排版任务。 LaTeX鼓励作者写作具有良好结构的文章，因为LaTeX就是哦那个过详细地说明文章的结构进行排版工作的。 TEX作为LaTeX的格式化引擎是免费软件，且具有极高的可移植性。 不足 对于出卖其灵魂的人来说，LaTeX不能很好的工作。 尽管预先定义好的版面可以调节一些参数，设计全新的版面还是很困难的，需要耗费大量的时间。 LaTeX不适合排本非结构化的，无序的文档。 参考文献[1] 一份不太简短的$LaTeX$2的介绍,Tobias Oetiker,中国CTEX用户小组，2002]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Soft修正函数]]></title>
      <url>%2F2017%2F02%2F16%2FSoft%E4%BF%AE%E6%AD%A3%E5%87%BD%E6%95%B0%2F</url>
      <content type="text"><![CDATA[softmax 模型和激活函数 12345678910111213141516171819"""Softmax."""scores = [3.0, 1.0, 0.2]import numpy as npdef softmax(x): """Compute softmax values for each sets of scores in x.""" pass # TODO:Compute and return softmax(x)print(softmax(scores))# Plot softmax curvesimport matplotlib.pyplot as pltx = np.arange(-2.0, 6.0, 0.1)scores = np.vstack([x, np.ones_like(x), 0.2 * np.ones_like(x)])plt.plot(x, softmax(scores).T, linewidth=2)plt.show() Softmax 模型 Note: softmax(x) 函数应该返回一个形状和x相同的NumPy array类型。 例如，当输入为一个列表或者一维矩阵（用列向量表示一个样本样本）时，比如说以下的： 1scores = [1.0, 2.0, 3.0] 应该返回一个同样长度（即3个元素）的一维矩阵： 1print softmax(scores) 1[ 0.09003057 0.24472847 0.66524096] 对于一个二维矩阵，如以下（列向量表示单个样本），例如: 1scores = np.array([[1, 2, 3, 6],[2, 4, 5, 6],[3, 8, 7, 6]]) 该函数应该返回一个同样大小(3,4)的二维矩阵，如以下: 123[[ 0.09003057 0.00242826 0.01587624 0.33333333] [ 0.24472847 0.01794253 0.11731043 0.33333333] [ 0.66524096 0.97962921 0.86681333 0.33333333]] 每个样本（列向量）中的概率加起来应当等于 1。 解决方案： 123def softmax(x): &quot;&quot;&quot;Compute softmax values for each sets of scores in x.&quot;&quot;&quot; return np.exp(x) / np.sum(np.exp(x), axis = 0) 运行结果: 1[ 0.8360188 0.11314284 0.05083836] 笔记： 两个数学函数 np.sum()： np.exp()]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[笔记1-从机器学习到深度学习-两个问题]]></title>
      <url>%2F2017%2F02%2F16%2F%E7%AC%94%E8%AE%B01-%E4%BB%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%B0%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E4%B8%A4%E4%B8%AA%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[这篇笔记主要摘出一部分的问题和解决方案来谈谈我学习 Deep Learning 时的一些感想和收获。 行人检测任务问题是： 假设你在你的车上有一个摄像头拍摄前面的街道，你想检测你前面的行人在哪？保证你不撞到他们，你怎么能通过一个分类器实现呢？ Answer：（我的想法） 首先选择一些标记了正负标记的样本（Positive：行人，Negative：杂讯），用于训练行人检测分类模型，然后利用训练好的模型来检测街道是否有行人。 导师给出的答案: A typical method is to run a binary classifier over different areas of an image, and mark the areas with a positive label as detected instances. 一种把这个检测问题转化为分类问题的方法是，一个分类器将图片中的小块分成两类，行人或者非行人，你就可以对图片多次执行这个分类器，每当它的输出为行人时就告诉你你所需要的行人位置！ 用于排名的分类（有时候也成为竞价排名）问题是 网页搜索排序,假设你有一个搜索请求,你想找到在网站上所有跟请求相关的网页,你怎么使用一个分类器实现？ 解决方案： 使分类器接收成对的搜索请求和网站,输出则是两类中的其中一个 相关或者不相关当然 如果你在整个网络中运行分类器,将会有无数的网页需要查看,但是搜索引擎将会走捷径,仅尝试分类那些比较有可能的候选网站.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用机器学习实现数字识别及分类]]></title>
      <url>%2F2017%2F02%2F16%2F%E5%88%A9%E7%94%A8%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%AE%9E%E7%8E%B0%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E5%8F%8A%E5%88%86%E7%B1%BB%2F</url>
      <content type="text"><![CDATA[利用opencv对图像进行边缘检测，轮廓检测等等，人工构建特征和训练集，结合 Euclidean distance 来计算相似度，进而可实现0～9的数字的分类。 1%matplotlib inline 1234import matplotlib.pyplot as pltimport cv2img = cv2.imread("CaptchaImage.jpg")plt.imshow(img) &lt;matplotlib.image.AxesImage at 0x6e77e10&gt; 1234import numpy as npkernel = np.ones((4,4), np.uint8)erosion = cv2.erode(img, kernel, iterations = 1)plt.imshow(erosion) &lt;matplotlib.image.AxesImage at 0x74a64e0&gt; 123456blurred = cv2.GaussianBlur(erosion, (5, 5), 0) #高斯滤波器滤掉杂讯edged = cv2.Canny(blurred, 30, 150) # Canny算子来实现边缘检测dilation = cv2.dilate(edged, kernel, iterations = 1) # opencv膨胀算子实现填充效果,还原回来正常的效果plt.imshow(dilation) &lt;matplotlib.image.AxesImage at 0x768a5c0&gt; 1234567891011# 检测她的轮廓image, contours, hierarchy = cv2.findContours(dilation.copy(), cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) # 将资料放在cnts里cnts = sorted([(c, cv2.boundingRect(c)[0]) for c in contours], key = lambda x:x[1])ary = []for (c,_) in cnts: (x, y, w, h) = cv2.boundingRect(c)# print x, y, w, h if w &gt; 21 and h &gt; 23: ary.append((x, y, w, h)) 123456789fig = plt.figure()for id, (x, y, w, h) in enumerate(ary): roi = dilation[y:y + h, x:x + w] thresh = roi.copy() a = fig.add_subplot(1, len(ary), id + 1) res = cv2.resize(thresh, (50,50)) cv2.imwrite('%d.png'%(id), res)# plt.imshow(thresh) plt.imshow(res) 1print ary [(15, 12, 27, 31), (50, 13, 28, 32), (91, 9, 39, 33), (132, 10, 34, 33), (167, 15, 22, 31)] 123456import string d = dict.fromkeys(string.ascii_uppercase, 0)a = [i for i in d.keys()]a.sort()for i in a: print i, A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 12345678910111213141516pic0 = cv2.imread("0.png")pic1 = cv2.imread("1.png")pic2 = cv2.imread("2.png")pic3 = cv2.imread("3.png")pic4 = cv2.imread("4.png")def mse(imageA, imageB): err = np.sum((imageA.astype("float") - imageB.astype("float")) ** 2) err /= float(imageA.shape[0] * imageA.shape[1]) return errprint mse(pic0, pic3)print mse(pic1, pic3)print mse(pic2, pic3)pic5 = cv2.imread("../../alphabet/0.png")print mse(pic0, pic5) 117312.474 75051.276 36459.2136 101212.4472 123456789101112import os def getNumber(pic): min_a = 99999999 min_png = None for png in os.listdir('alphabet'): ref = cv2.imread('alphabet/' + png) if mse(ref, pic) &lt; min_a: min_a = mse(ref, pic) min_png = png return min_png, min_aprint getNumber(pic0) (&apos;Y.png&apos;, 21618.709200000001)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[系列01-利用Python爬虫来抓取银行的牌告汇率]]></title>
      <url>%2F2017%2F02%2F16%2F%E5%88%A9%E7%94%A8Python%E7%88%AC%E8%99%AB%E6%9D%A5%E6%8A%93%E5%8F%96%E9%93%B6%E8%A1%8C%E7%9A%84%E7%89%8C%E5%91%8A%E6%B1%87%E7%8E%87%2F</url>
      <content type="text"><![CDATA[python爬虫抓取台湾银行的牌告汇率,让你更加获益 台湾银行网站为 http://rate.bot.com.tw/xrt?Lang=zh-TW视频为：https://www.youtube.com/watch?v=-c5rrzjsN34简介：利用pandas爬去牌告汇率，然后生成excel文件 利用谷歌浏览器: chrome –&gt; 检查 –&gt; Network(监听器) 传统的requests爬取12345# import require moduleimport requests# Get request from indentity object websitereq = requests.get('http://rate.bot.com.tw/xrt?Lang=zh-TW')print req.text &lt;!DOCTYPE html&gt; &lt;html lang=&quot;zh-TW&quot; class=&quot;no-js&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;title&gt;臺灣銀行牌告匯率&lt;/title&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge, chrome=1&quot;&gt; &lt;meta name=&quot;description&quot; content=&quot;臺灣銀行匯率利率黃金牌價查詢&quot;&gt; &lt;meta name=&quot;keywords&quot; content=&quot;&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, ....... h class=&quot;rate-content-sight print_hide&quot; data-hide=&quot;phone&quot;&gt; &lt;span style=&quot;width:inherit;&quot;&gt; &lt;span class=&quot;&quot;&gt;本行買入&lt;/span&gt; &lt;/span&gt; &lt;/th&gt; &lt;th class=&quot;rate-content-sight print_hide&quot; data-hide=&quot;phone&quot;&gt; &lt;span style=&quot;width:inherit;&quot;&gt; &lt;span class=&quot;&quot;&gt;本行賣出&lt;/span&gt; &lt;/span&gt; &lt;/th&gt; &lt;th class=&quot;hidden&quot;&gt;&lt;/th&gt; &lt;th class=&quot;display_none_print_show print_width&quot;&gt;&lt;span style=&quot;width:inherit;&quot;&gt;本行買入&lt;/span&gt;&lt;/th&gt; &lt;th class=&quot;display_none_print_show print_width&quot;&gt;&lt;span style=&quot;width:inherit;&quot;&gt;本行賣出&lt;/span&gt;&lt;/th&gt; &lt;th class=&quot;display_none_print_show print_width&quot;&gt;&lt;span style=&quot;width:inherit;&quot;&gt;本行買入&lt;/span&gt;&lt;/th&gt; &lt;th class=&quot;display_none_print_show print_width&quot;&gt;&lt;span style=&quot;width:inherit;&quot;&gt;本行賣出&lt;/span&gt;&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td data-table=&quot;幣別&quot; class=&quot;currency phone-small-font&quot;&gt; &lt;div&gt; &lt;div class=&quot;sp-div sp-america-div&quot;&gt; &lt;img title=&quot;幣別國旗&quot; alt=&quot;幣別國旗&quot; src=&quot;/Content/images/sprite_lateral.png&quot; class=&quot;sp-img sp-america-img&quot; /&gt; &lt;/div&gt; &lt;br class=&quot;visible-phone print_hide&quot; /&gt; &lt;div class=&quot;visible-phone print_hide&quot;&gt; 美金 (USD) &lt;/div&gt; &lt;div class=&quot;hidden-phone print_show&quot; style=&quot;text-indent:30px;&quot;&gt; 美金 (USD) &lt;/div&gt; &lt;/div&gt; &lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;31.18&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;31.722&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;31.48&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;31.58&lt;/td&gt; &lt;td data-table=&quot;遠期匯率買入/賣出&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/forward/USD&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;歷史匯率&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/history/USD&quot; target=&quot;_blank&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;31.18&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;31.722&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;31.48&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;31.58&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td data-table=&quot;幣別&quot; class=&quot;currency phone-small-font&quot;&gt; &lt;div&gt; &lt;div class=&quot;sp-div sp-hong-kong-div&quot;&gt; &lt;img title=&quot;幣別國旗&quot; alt=&quot;幣別國旗&quot; src=&quot;/Content/images/sprite_lateral.png&quot; class=&quot;sp-img sp-hong-kong-img&quot; /&gt; &lt;/div&gt; &lt;br class=&quot;visible-phone print_hide&quot; /&gt; &lt;div class=&quot;visible-phone print_hide&quot;&gt; 港幣 (HKD) &lt;/div&gt; &lt;div class=&quot;hidden-phone print_show&quot; style=&quot;text-indent:30px;&quot;&gt; 港幣 (HKD) &lt;/div&gt; &lt;/div&gt; &lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;3.914&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;4.109&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;4.034&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;4.094&lt;/td&gt; &lt;td data-table=&quot;遠期匯率買入/賣出&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/forward/HKD&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;歷史匯率&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/history/HKD&quot; target=&quot;_blank&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;3.914&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;4.109&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;4.034&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;4.094&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td data-table=&quot;幣別&quot; class=&quot;currency phone-small-font&quot;&gt; &lt;div&gt; &lt;div class=&quot;sp-div sp-england-div&quot;&gt; &lt;img title=&quot;幣別國旗&quot; alt=&quot;幣別國旗&quot; src=&quot;/Content/images/sprite_lateral.png&quot; class=&quot;sp-img sp-england-img&quot; /&gt; &lt;/div&gt; &lt;br class=&quot;visible-phone print_hide&quot; /&gt; &lt;div class=&quot;visible-phone print_hide&quot;&gt; 英鎊 (GBP) &lt;/div&gt; &lt;div class=&quot;hidden-phone print_show&quot; style=&quot;text-indent:30px;&quot;&gt; 英鎊 (GBP) &lt;/div&gt; &lt;/div&gt; &lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;37.82&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;39.75&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;38.69&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;39.11&lt;/td&gt; &lt;td data-table=&quot;遠期匯率買入/賣出&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/forward/GBP&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;歷史匯率&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/history/GBP&quot; target=&quot;_blank&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;37.82&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;39.75&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;38.69&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;39.11&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td data-table=&quot;幣別&quot; class=&quot;currency phone-small-font&quot;&gt; &lt;div&gt; &lt;div class=&quot;sp-div sp-australia-div&quot;&gt; &lt;img title=&quot;幣別國旗&quot; alt=&quot;幣別國旗&quot; src=&quot;/Content/images/sprite_lateral.png&quot; class=&quot;sp-img sp-australia-img&quot; /&gt; &lt;/div&gt; &lt;br class=&quot;visible-phone print_hide&quot; /&gt; &lt;div class=&quot;visible-phone print_hide&quot;&gt; 澳幣 (AUD) &lt;/div&gt; &lt;div class=&quot;hidden-phone print_show&quot; style=&quot;text-indent:30px;&quot;&gt; 澳幣 (AUD) &lt;/div&gt; &lt;/div&gt; &lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;23.53&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;24.19&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;23.72&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;23.95&lt;/td&gt; &lt;td data-table=&quot;遠期匯率買入/賣出&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/forward/AUD&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;歷史匯率&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/history/AUD&quot; target=&quot;_blank&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;23.53&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;24.19&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;23.72&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;23.95&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td data-table=&quot;幣別&quot; class=&quot;currency phone-small-font&quot;&gt; &lt;div&gt; &lt;div class=&quot;sp-div sp-canada-div&quot;&gt; &lt;img title=&quot;幣別國旗&quot; alt=&quot;幣別國旗&quot; src=&quot;/Content/images/sprite_lateral.png&quot; class=&quot;sp-img sp-canada-img&quot; /&gt; &lt;/div&gt; &lt;br class=&quot;visible-phone print_hide&quot; /&gt; &lt;div class=&quot;visible-phone print_hide&quot;&gt; 加拿大幣 (CAD) &lt;/div&gt; &lt;div class=&quot;hidden-phone print_show&quot; style=&quot;text-indent:30px;&quot;&gt; 加拿大幣 (CAD) &lt;/div&gt; &lt;/div&gt; &lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;23.34&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;24.08&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;23.61&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;23.83&lt;/td&gt; &lt;td data-table=&quot;遠期匯率買入/賣出&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/forward/CAD&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;歷史匯率&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/history/CAD&quot; target=&quot;_blank&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;23.34&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;24.08&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;23.61&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;23.83&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td data-table=&quot;幣別&quot; class=&quot;currency phone-small-font&quot;&gt; &lt;div&gt; &lt;div class=&quot;sp-div sp-singapore-div&quot;&gt; &lt;img title=&quot;幣別國旗&quot; alt=&quot;幣別國旗&quot; src=&quot;/Content/images/sprite_lateral.png&quot; class=&quot;sp-img sp-singapore-img&quot; /&gt; &lt;/div&gt; &lt;br class=&quot;visible-phone print_hide&quot; /&gt; &lt;div class=&quot;visible-phone print_hide&quot;&gt; 新加坡幣 (SGD) &lt;/div&gt; &lt;div class=&quot;hidden-phone print_show&quot; style=&quot;text-indent:30px;&quot;&gt; 新加坡幣 (SGD) &lt;/div&gt; &lt;/div&gt; &lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;21.62&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;rate-content-cash text-right print_hide&quot;&gt;22.4&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;22.04&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;rate-content-sight text-right print_hide&quot; data-hide=&quot;phone&quot;&gt;22.22&lt;/td&gt; &lt;td data-table=&quot;遠期匯率買入/賣出&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/forward/SGD&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;歷史匯率&quot; class=&quot;text-center print_hide phone-small-font&quot;&gt;&lt;a href=&quot;/xrt/history/SGD&quot; target=&quot;_blank&quot;&gt;查詢&lt;/a&gt;&lt;/td&gt; &lt;td data-table=&quot;本行現金買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;21.62&lt;/td&gt; &lt;td data-table=&quot;本行現金賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;22.4&lt;/td&gt; &lt;td data-table=&quot;本行即期買入&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;22.04&lt;/td&gt; &lt;td data-table=&quot;本行即期賣出&quot; class=&quot;text-right display_none_print_show print_width&quot;&gt;22.22&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td data-table=&quot;幣別&quot; class=&quot;currency phone-small-font&quot;&gt; &lt;div&gt; &lt;div class=&quot;sp-div sp-swiss-div&quot;&gt; &lt;img title=&quot;幣別國旗&quot; alt=&quot;幣別國旗&quot; src=&quot;/Content/images/sprite_lateral.png&quot; class=&quot;sp-img sp-swiss-img&quot; /&gt; ...... $(window).load(function () { //最近一個營業日不可比較幣別，比較幣別為空時不顯示現金&amp;即期(for chrome) search_range_check($(&apos;input:radio:checked[name=&quot;search_range&quot;]&apos;)); //alert(&quot;load&quot;); }) &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 利用pandas库来爬取网页的数据1234# improt pandas moduleimport pandas# read html to transform html to list of pythondfs = pandas.read_html('http://rate.bot.com.tw/xrt?Lang=zh-TW') 1type(dfs) list 1len(dfs) 1 123# dfs is list# currency is DataFramecurrency = dfs[0] 1type(currency) pandas.core.frame.DataFrame 12# currency.ix[row, columnns]currency = currency.ix[:,:5] 12# 重置列标题currency.columns = [u'幣別',u'現金匯率-本行買入',u'現金匯率-本行賣出',u'即期匯率-本行買入',u'即期匯率-本行賣出'] 12# 正则表达式 提取币别currency[u'幣別'] = currency[u'幣別'].str.extract('\((\w+)\)') # \((\w+)\) C:\Users\Administrator\Anaconda2\lib\site-packages\ipykernel\__main__.py:1: FutureWarning: currently extract(expand=None) means expand=False (return Index/Series/DataFrame) but in a future version of pandas this will be changed to expand=True (return DataFrame) if __name__ == &apos;__main__&apos;: 1currency 幣別 現金匯率-本行買入 現金匯率-本行賣出 即期匯率-本行買入 即期匯率-本行賣出 0 USD 31.18 31.722 31.48 31.58 1 HKD 3.914 4.109 4.034 4.094 2 GBP 37.82 39.75 38.69 39.11 3 AUD 23.53 24.19 23.72 23.95 4 CAD 23.34 24.08 23.61 23.83 5 SGD 21.62 22.4 22.04 22.22 6 CHF 30.68 31.74 31.21 31.5 7 JPY 0.2664 0.2774 0.2728 0.2768 8 ZAR - - 2.29 2.37 9 SEK 3.14 3.65 3.48 3.58 10 NZD 22.34 22.97 22.58 22.78 11 THB 0.7886 0.9316 0.8771 0.9171 12 PHP 0.5826 0.7156 - - 13 IDR 0.00198 0.00268 - - 14 EUR 32.96 34.11 33.46 33.86 15 KRW 0.02518 0.02908 - - 16 VND 0.00102 0.00152 - - 17 MYR 6.006 7.606 - - 18 CNY 4.51 4.672 4.582 4.632 12# save currency to excel form currency.to_excel('currency.xlsx')]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用pandas实现输出漂亮的图表]]></title>
      <url>%2F2017%2F02%2F16%2F%E5%88%A9%E7%94%A8pandas%E5%AE%9E%E7%8E%B0%E8%BE%93%E5%87%BA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%9B%BE%E8%A1%A8%2F</url>
      <content type="text"><![CDATA[利用python的数据分析 pandas 库来可视化近期货币的走势，具体代码见-&gt; 12import pandasdf = pandas.read_csv('ExchangeRate@201701231600.csv') 1df.head() 1df.info() &lt;class &apos;pandas.core.frame.DataFrame&apos;&gt; Int64Index: 127 entries, 20170123 to 20160725 Data columns (total 22 columns): 数据日期 127 non-null object 币别 127 non-null object 汇率 127 non-null float64 现金 127 non-null float64 即期 127 non-null float64 远期10天 127 non-null float64 远期30天 127 non-null float64 远期60天 127 non-null float64 远期90天 127 non-null float64 远期120天 127 non-null float64 远期150天 127 non-null float64 远期180天 127 non-null object 汇率.1 127 non-null float64 现金.1 127 non-null float64 即期.1 127 non-null float64 远期10天.1 127 non-null float64 远期30天.1 127 non-null float64 远期60天.1 127 non-null float64 远期90天.1 127 non-null float64 远期120天.1 127 non-null float64 远期150天.1 127 non-null float64 远期180天.1 0 non-null float64 dtypes: float64(19), object(3) memory usage: 22.8+ KB 1? pandas.to_datetime 1df.index = pandas.to_datetime(df.index, format='%Y%m%d') 1%pylab inline Populating the interactive namespace from numpy and matplotlib 1df.plot(kind = 'line', y=['汇率', '现金']) &lt;matplotlib.axes._subplots.AxesSubplot at 0x9fad438&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[old-利用opencv实现脸部识别]]></title>
      <url>%2F2017%2F02%2F16%2Fold-%E5%88%A9%E7%94%A8opencv%E5%AE%9E%E7%8E%B0%E8%84%B8%E9%83%A8%E8%AF%86%E5%88%AB%2F</url>
      <content type="text"><![CDATA[利用很简单的OpenCV库在JuPyter上实现了一个简单的练习，人脸检测。使用了OpenCV成熟的级联分类器,又称为 分类器 haarcascade_frontalface_default.xml 12import matplotlib.pyplot as plt%matplotlib inline 12345import sys, cv2imagePath = 'goddess.jpg'image = cv2.imread(imagePath)# plt.imshow(image)plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)) &lt;matplotlib.image.AxesImage at 0x82e7e48&gt; 1234567891011faceCascade = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)faces = faceCascade.detectMultiScale( gray, #灰阶图像 scaleFactor = 1.1, #缩减10个百分点的图像 minNeighbors = 5, # minSize = (30, 30), #window flags = cv2.CASCADE_SCALE_IMAGE)print faces #[[x, y, w, h]] [[280 51 194 194]] 123456import randomfont =cv2.FONT_HERSHEY_SCRIPT_SIMPLEXfor (x, y, w, h) in faces: cv2.rectangle(image, (x, y), (x + w, y + h), (14, 201, 255) , 2) #在脸上加上一个桔色的宽度为2的矩形边框 cv2.putText(image, str(random.randrange(20, 30)), (x+(w/2)-18, y-10), font, 1, (14, 201, 255), 3)plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)) &lt;matplotlib.image.AxesImage at 0x10639860&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[爬虫实战第一天-抓取淘宝网站的名称和价格]]></title>
      <url>%2F2017%2F02%2F16%2F%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98%E7%AC%AC%E4%B8%80%E5%A4%A9-%E6%8A%93%E5%8F%96%E6%B7%98%E5%AE%9D%E7%BD%91%E7%AB%99%E7%9A%84%E5%90%8D%E7%A7%B0%E5%92%8C%E4%BB%B7%E6%A0%BC%2F</url>
      <content type="text"><![CDATA[之前在YouTube上学习过一系列的爬虫实战课程,淘宝（这里的淘宝指的是 台湾淘宝）使用AJAX 的方式填入页面内容。因此在这里便可以从XHR 以及JS 下手，找寻入口点，再使用正规表达式(re)，便可以快速的剖析出重要资讯， 123import requestsres = requests.get('https://world.taobao.com/search/json.htm?navigator=all&amp;_ksTS=1485567171915_27&amp;spm=a21bp.7806943.20151106.1&amp;json=on&amp;suggest_query=iphon&amp;cna=tmcHEBoqTyQCAbfMJrlM1vUh&amp;wq=iphon&amp;suggest=0_4&amp;_input_charset=utf-8&amp;source=suggest&amp;q=iphone6%E6%89%8B%E6%9C%BA%E5%A3%B3&amp;callback=__jsonp_cb&amp;abtest=_AB-LR517-LR854-LR895-PR517-PR854-PR895&amp;nid=&amp;type=&amp;uniqpid=')print res.text if(window.__jsonp_cb){__jsonp_cb({&quot;abtestParams&quot;:{&quot;bucket&quot;:&quot;18&quot;,&quot;biparam&quot;:&quot;_AB-LR517-LR854-LR895-PR517-PR854-PR895&quot;},&quot;autoNav&quot;:{&quot;auxCategory&quot;:[],&quot;findNum&quot;:&quot;191.41万&quot;,&quot;navCategory&quot;:[{&quot;cid&quot;:&quot;56152131&quot;,&quot;cname&quot;:&quot;3C数码配件&quot;,&quot;count&quot;:&quot;1857503&quot;,&quot;flag&quot;:&quot;qp_commend&quot;,&quot;subCids&quot;:[{&quot;cid&quot;:&quot;56152157&quot;,&quot;cname&quot;:&quot;保护套/壳&quot;,&quot;count&quot;:&quot;1844168&quot;,&quot;flag&quot;:&quot;qp_commend&quot;},{&quot;cid&quot;:&quot;56152161&quot;,&quot;cname&quot;:&quot;充电器/線&quot;,&quot;count&quot;:&quot;503&quot;,&quot;flag........ 1234import json import rem = re.search('if\(window.__jsonp_cb\)\&#123;__jsonp_cb\((.*?)\)\&#125;', res.text)m.group(1) u&apos;{&quot;abtestParams&quot;:{&quot;bucket&quot;:&quot;18&quot;,&quot;biparam&quot;:&quot;_AB-LR517-LR854-LR895-PR517-PR854-PR895&quot;},&quot;autoNav&quot;:{&quot;auxCategory&quot;:[],&quot;findNum&quot;:&quot;191.41\u4e07&quot;,&quot;navCategory&quot;:[{&quot;cid&quot;:&quot;56152131&quot;,&quot;cname&quot;:&quot;3C\u6570\u7801\u914d\u4ef6&quot;,&quot;count&quot;:&quot;1857503&quot;,&quot;flag&quot;:&quot;qp_commend&quot;,&quot;subCids&quot;:[{&quot;cid&quot;:&quot;56152157&quot;,&quot;cname&quot;:&quot;\u4fdd\u62a4\u5957/\u58f3&quot;,&quot;count&quot;:&quot;1844168&quot;,&quot;flag&quot;:&quot;qp_commend&quot;},{&quot;cid&quot;:&quot;56152161&quot;,&quot;cname&quot; 1jd = json.loads(m.group(1)) 1jd {u&apos;abtestParams&apos;: {u&apos;biparam&apos;: u&apos;_AB-LR517-LR854-LR895-PR517-PR854-PR895&apos;, u&apos;bucket&apos;: u&apos;18&apos;},......... 12with open('a.json','w') as f: f.write(json.dumps(jd)) 12for item in jd['itemList']: print item['nick'],item['price'] ibhdme数码旗舰店 29.00 晋美通讯 39.00 柯米数码专营店 35.00 凯莱德数码专营店 88.00 pehe旗舰店 48.00 法栋数码专营 98.00 coolook数码旗舰店 35.00 lunaluno数码旗舰店 29.90 亦嘉殿 28.00 驰界数码 58.00 citycase旗舰店 58.00 makorday 29.80 唯友通讯 58.00 milan9995200 68.00 伯托尔数码专营店 138.00 h_belis 26.00 梦幻文文 60.00 12import pandasdf = pandas.DataFrame(jd['itemList']) 1df]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[about]]></title>
      <url>%2F2017%2F02%2F16%2Fabout%2F</url>
      <content type="text"></content>
    </entry>

    
  
  
</search>
